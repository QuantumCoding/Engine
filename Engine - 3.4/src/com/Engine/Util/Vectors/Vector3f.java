package com.Engine.Util.Vectors;import static java.lang.Math.cos;import static java.lang.Math.sin;import org.lwjgl.util.vector.Matrix4f;import org.lwjgl.util.vector.Vector4f;public class Vector3f {	public float x, y, z;	public Vector3f() {		this(0, 0, 0);	}		public Vector3f(float x, float y, float z) {		this.x = x;		this.y = y;		this.z = z;	}		public Vector3f(double x, double y, double z) {		this((float) x, (float) y, (float) z);	}		public Vector3f(float[] values) {		this(values[0], values[1], values[2]);	}		public Vector3f(double[] values) {		this(values[0], values[1], values[2]);	}		public Vector3f(float value) {		this(value, value, value);	}		public Vector3f(double value) {		this(value, value, value);	}		public Vector3f(Vector2f clone) {		this(clone, 0);	}		public Vector3f(Vector2f clone, float z) {		this(clone.x, clone.y, z);	}		public Vector3f(Vector3f clone) {		this(clone.x, clone.y, clone.z);	}		public Vector3f(org.lwjgl.util.vector.Vector3f clone) {		this(clone.x, clone.y, clone.z);	}	public org.lwjgl.util.vector.Vector3f toLWJGL() {		return new org.lwjgl.util.vector.Vector3f(x, y, z);	}		public int hashCode() {		final int prime = 31;		int result = 1;				result = prime * result + Float.floatToIntBits(x);		result = prime * result + Float.floatToIntBits(y);		result = prime * result + Float.floatToIntBits(z);				return result;	}	public boolean equals(Object obj) {		if (this == obj) return true;		if (obj == null) return false;		if (!(obj instanceof Vector3f)) return false;				Vector3f other = (Vector3f) obj;		if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x)) return false;		if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y)) return false;		if (Float.floatToIntBits(z) != Float.floatToIntBits(other.z)) return false;				return true;	}		public boolean equals(float x, float y, float z) {		if (Float.floatToIntBits(this.x) != Float.floatToIntBits(x)) return false;		if (Float.floatToIntBits(this.y) != Float.floatToIntBits(y)) return false;		if (Float.floatToIntBits(this.z) != Float.floatToIntBits(z)) return false;				return true;	}//----------------------------------------------------- Basic Arithmetic -------------------------------------------------------\\	public Vector3f add(float add) { return add(add, add, add); }	public Vector3f add(double add) { return add(add, add, add); }	public Vector3f add(Vector3f add) { return add(add.x, add.y, add.z); }	public Vector3f add(double x, double y, double z) { return add((float) x, (float) y, (float) z); }		public Vector3f add(float x, float y, float z) {		return new Vector3f(				this.x + x,				this.y + y,				this.z + z			);	}		public Vector3f subtract(float subtract) { return subtract(subtract, subtract, subtract); }	public Vector3f subtract(double subtract) { return subtract(subtract, subtract, subtract); }	public Vector3f subtract(Vector3f subtract) { return subtract(subtract.x, subtract.y, subtract.z); } 	public Vector3f subtract(double x, double y, double z) { return subtract((float) x, (float) y, (float) z); }		public Vector3f subtract(float x, float y, float z) {		return new Vector3f(				this.x - x,				this.y - y,				this.z - z			);	}	public Vector3f multiply(float multiply) { return multiply(multiply, multiply, multiply); }	public Vector3f multiply(double multiply) { return multiply(multiply, multiply, multiply); }	public Vector3f multiply(Vector3f multiply) { return multiply(multiply.x, multiply.y, multiply.z); }	public Vector3f multiply(double x, double y, double z) { return multiply((float) x, (float) y, (float) z); }		public Vector3f multiply(float x, float y, float z) {		return new Vector3f(				this.x * x,				this.y * y,				this.z * z			);	}		public Vector3f divide(float divide) { return divide(divide, divide, divide); }	public Vector3f divide(double divide) { return divide(divide, divide, divide); }	public Vector3f divide(Vector3f divide) { return divide(divide.x, divide.y, divide.z); }	public Vector3f divide(double x, double y, double z) { return divide((float) x, (float) y, (float) z); }		public Vector3f divide(float x, float y, float z) {		return new Vector3f(				this.x / x,				this.y / y,				this.z / z			);	}	public Vector3f mod(float mod) { return mod(mod, mod, mod); }	public Vector3f mod(double mod) { return mod(mod, mod, mod); }	public Vector3f mod(Vector3f mod) { return mod(mod.x, mod.y, mod.z); }	public Vector3f mod(double x, double y, double z) { return mod((float) x, (float) y, (float) z); }		public Vector3f mod(float x, float y, float z) {		return new Vector3f(				this.x % x,				this.y % y,				this.z % z			);	}		public Vector3f pow(float pow) { return pow(pow, pow, pow); }	public Vector3f pow(double pow) { return pow(pow, pow, pow); }	public Vector3f pow(Vector3f pow) { return pow(pow.x, pow.y, pow.z); }	public Vector3f pow(double x, double y, double z) { return pow((float) x, (float) y, (float) z); }		public Vector3f pow(float x, float y, float z) {		return new Vector3f(				(float) Math.pow(this.x, x),				(float) Math.pow(this.y, y),				(float) Math.pow(this.z, z)			);	}	public Vector3f randomize(float max) { return randomize(max, max, max); }	public Vector3f randomize(double max) { return randomize(max, max, max); }	public Vector3f randomize(Vector3f max) { return randomize(max.x, max.y, max.z); }	public Vector3f randomize(double x, double y, double z) { return randomize((float) x, (float) y, (float) z); }		public Vector3f randomize(float x, float y, float z) {		return new Vector3f(				Math.random() * x, 				Math.random() * y, 				Math.random() * z			);	}		public static Vector3f random(float max) { return random(max, max, max); }	public static Vector3f random(double max) { return random(max, max, max); }	public static Vector3f random(Vector3f max) { return random(max.x, max.y, max.z); }	public static Vector3f random(double x, double y, double z) { return random((float) x, (float) y, (float) z); }		public static Vector3f random(float x, float y, float z) {		return new Vector3f(				Math.random() * x, 				Math.random() * y, 				Math.random() * z			);	}	//--------------------------------------------------------- Cap Values ---------------------------------------------------------\\		public Vector3f capMin(float capMin) { return capMin(capMin, capMin, capMin); }	public Vector3f capMin(double capMin) { return capMin(capMin, capMin, capMin); }	public Vector3f capMin(Vector3f capMin) { return capMin(capMin.x, capMin.y, capMin.z); }	public Vector3f capMin(double x, double y, double z) { return capMin((float) x, (float) y, (float) z); }	public Vector3f capMin(float x, float y, float z) {		return new Vector3f(				this.x < x ? x : this.x, 				this.y < y ? y : this.y, 				this.z < z ? z : this.z			);	}		public Vector3f capMax(float capMax) { return capMax(capMax, capMax, capMax); }	public Vector3f capMax(double capMax) { return capMax(capMax, capMax, capMax); }	public Vector3f capMax(Vector3f capMax) { return capMax(capMax.x, capMax.y, capMax.z); }	public Vector3f capMax(double x, double y, double z) { return capMax((float) x, (float) y, (float) z); }	public Vector3f capMax(float x, float y, float z) {		return new Vector3f(				this.x > x ? x : this.x, 				this.y > y ? y : this.y, 				this.z > z ? z : this.z			);	}		public float max() {		float max = 0;				if(x > max) max = x;		if(y > max) max = y;		if(z > max) max = z;				return max;	}		public float min() {		float min = 0;				if(x < min) min = x;		if(y < min) min = y;		if(z < min) min = z;				return min;	}//------------------------------------------------- Vector Mathematical Methods ------------------------------------------------\\		public float length() {		return (float) Math.sqrt( dot(this) );	}		public float lengthSquared() {		return dot(this);	}		public float dot(Vector3f other) {		return (x * other.x) +			   (y * other.y) +			   (z * other.z) ;	}		public Vector3f crossProduct(Vector3f other) {		return new Vector3f(				(y * other.z) - (z * other.y), 				(z * other.x) - (x * other.z), 				(x * other.y) - (y * other.x)			);	}		public Vector3f difference(Vector3f other) {		return subtract(other).abs();	}	public float distance(Vector3f distance) { return distance(distance.x, distance.y, distance.z); }	public float distance(double x, double y, double z) { return distance((float) x, (float) y, (float) z); }		public float distance(float x, float y, float z) {		return (float) Math.sqrt(distanceSquared(x, y, z));	}		public float distanceSquared(Vector3f distance) { return distanceSquared(distance.x, distance.y, distance.z); }	public float distanceSquared(double x, double y, double z) { return distanceSquared((float) x, (float) y, (float) z); }		public float distanceSquared(float x, float y, float z) {		return (float) (				Math.pow(this.x - x, 2) +				Math.pow(this.y - y, 2) + 				Math.pow(this.z - z, 2)			);	}	//------------------------------------------------- Other Mathematical Methods -------------------------------------------------\\		public Vector3f transform(Matrix4f matrix) {		Vector4f vecOut = new Vector4f();		Matrix4f.transform(matrix, new Vector4f(x, y, z, 1), vecOut);		return new Vector3f(vecOut.x, vecOut.y, vecOut.z);	}		public Vector3f invert() {		return new Vector3f(1.0f / x, 1.0f / y, 1.0f / z);	}		public Vector3f direction() {		return new Vector3f(				x > 0 ? 1 : x < 0 ? -1 : 0, 				y > 0 ? 1 : y < 0 ? -1 : 0,				z > 0 ? 1 : z < 0 ? -1 : 0			);	}			public float sum() {		return x + y + z;	}		public Vector3f truncate() {		return new Vector3f( (int) x, (int) y, (int) z );	}		public Vector3f round() {		return new Vector3f(				Math.round(x),				Math.round(y),				Math.round(z)			);	}		public Vector3f abs() {		return new Vector3f(				Math.abs(x),				Math.abs(y),				Math.abs(z)			);	}		public Vector3f normalize() {		return divide(length());	}		public Vector3f reflect(Vector3f normal) {		return subtract(normal.multiply(dot(normal) * 2));	}		public static Vector3f calculateRotationAxis_A(Vector3f rot) {		return new Vector3f(				 cos(rot.y) * cos(rot.z), 				 sin(rot.x) * sin(rot.y) * cos(rot.z) + cos(rot.x) * sin(rot.z), 				-cos(rot.x) * sin(rot.y) * cos(rot.z) + sin(rot.x) * sin(rot.z)			);	}	public static Vector3f calculateRotationAxis_B(Vector3f rot) {		return new Vector3f(				-cos(rot.y) * sin(rot.z), 				-sin(rot.x) * sin(rot.y) * sin(rot.z) + cos(rot.x) * cos(rot.z), 				 cos(rot.x) * sin(rot.y) * sin(rot.z) + sin(rot.x) * cos(rot.z)			);	}		public static Vector3f calculateRotationAxis_C(Vector3f rot) {		return new Vector3f(				 sin(rot.y), 				-sin(rot.x) * cos(rot.y), 				 cos(rot.x) * cos(rot.y)			);	}		public Vector3f rotate(Vector3f rot) {		rot = rot.toRadians();				Vector3f a = Vector3f.calculateRotationAxis_A(rot);		Vector3f b = Vector3f.calculateRotationAxis_B(rot);		Vector3f c = Vector3f.calculateRotationAxis_C(rot);		                                                                              		return new Vector3f(				(float) (x * a.x + y * b.x + z * c.x),				(float) (x * a.y + y * b.y + z * c.y),				(float) (x * a.z + y * b.z + z * c.z)			);	}			public Vector3f invertRotate(Vector3f rot) {		rot = rot.toRadians();		Vector3f a = Vector3f.calculateRotationAxis_A(rot);		Vector3f b = Vector3f.calculateRotationAxis_B(rot);		Vector3f c = Vector3f.calculateRotationAxis_C(rot);				return new Vector3f(				(float) (x * (b.y * c.z - c.y * b.z) + y * (c.x * b.z - b.x * c.z) + z * (b.x * c.y - c.x * b.y)),				(float) (x * (c.y * a.z - a.y * c.z) + y * (a.x * c.z - c.x * a.z) + z * (c.x * a.y - a.x * c.y)),				(float) (x * (a.y * b.z - b.y * a.z) + y * (b.x * a.z - a.x * b.z) + z * (a.x * b.y - b.x * a.y))			);	}			public Vector3f toDegrees() {		return new Vector3f(				(float) Math.toDegrees(x),				(float) Math.toDegrees(y),				(float) Math.toDegrees(z)			);	}		public Vector3f toRadians() {		return new Vector3f(				(float) Math.toRadians(x),				(float) Math.toRadians(y),				(float) Math.toRadians(z)			);	}	//------------------------------------------------ Logical Mathematical Operators ----------------------------------------------\\	public boolean greaterThen(float then) { return greaterThen(then, then, then); }	public boolean greaterThen(double then) { return greaterThen(then, then, then); }	public boolean greaterThen(Vector3f then) { return greaterThen(then.x, then.y, then.z); }	public boolean greaterThen(double x, double y, double z) { return greaterThen((float) x, (float) y, (float) z); }		public boolean greaterThen(float x, float y, float z) {		return  this.x > x &&				this.y > y &&				this.z > z;	}		public boolean anyGreaterThen(float then) { return anyGreaterThen(then, then, then); }	public boolean anyGreaterThen(double then) { return anyGreaterThen(then, then, then); }	public boolean anyGreaterThen(Vector3f then) { return anyGreaterThen(then.x, then.y, then.z); }	public boolean anyGreaterThen(double x, double y, double z) { return anyGreaterThen((float) x, (float) y, (float) z); }		public boolean anyGreaterThen(float x, float y, float z) {		return  this.x > x ||				this.y > y ||				this.z > z;	}		public boolean greaterThenOrEqual(float then) { return greaterThenOrEqual(then, then, then); }	public boolean greaterThenOrEqual(double then) { return greaterThenOrEqual(then, then, then); }	public boolean greaterThenOrEqual(Vector3f then) { return greaterThenOrEqual(then.x, then.y, then.z); }	public boolean greaterThenOrEqual(double x, double y, double z) { return greaterThenOrEqual((float) x, (float) y, (float) z);}		public boolean greaterThenOrEqual(float x, float y, float z) {		return  this.x >= x &&				this.y >= y &&				this.z >= z;	}	public boolean anyGreaterThenOrEqual(float then) { return anyGreaterThenOrEqual(then, then, then); }	public boolean anyGreaterThenOrEqual(double then) { return anyGreaterThenOrEqual(then, then, then); }	public boolean anyGreaterThenOrEqual(Vector3f then) { return anyGreaterThenOrEqual(then.x, then.y, then.z); }	public boolean anyGreaterThenOrEqual(double x, double y, double z) { 		return anyGreaterThenOrEqual((float) x, (float) y, (float) z); }		public boolean anyGreaterThenOrEqual(float x, float y, float z) {		return  this.x >= x ||				this.y >= y ||				this.z >= z;	}		public boolean lessThen(float then) { return lessThen(then, then, then); }	public boolean lessThen(double then) { return lessThen(then, then, then); }	public boolean lessThen(Vector3f then) { return lessThen(then.x, then.y, then.z); }	public boolean lessThen(double x, double y, double z) { return lessThen((float) x, (float) y, (float) z); }		public boolean lessThen(float x, float y, float z) {		return  this.x < x &&				this.y < y &&				this.z < z;	}		public boolean anyLessThen(float then) { return anyLessThen(then, then, then); }	public boolean anyLessThen(double then) { return anyLessThen(then, then, then); }	public boolean anyLessThen(Vector3f then) { return anyLessThen(then.x, then.y, then.z); }	public boolean anyLessThen(double x, double y, double z) { return anyLessThen((float) x, (float) y, (float) z); }		public boolean anyLessThen(float x, float y, float z) {		return  this.x < x ||				this.y < y ||				this.z < z;	}		public boolean lessThenOrEqual(float then) { return lessThenOrEqual(then, then, then); }	public boolean lessThenOrEqual(double then) { return lessThenOrEqual(then, then, then); }	public boolean lessThenOrEqual(Vector3f then) { return lessThenOrEqual(then.x, then.y, then.z); }	public boolean lessThenOrEqual(double x, double y, double z) { return lessThenOrEqual((float) x, (float) y, (float) z); }		public boolean lessThenOrEqual(float x, float y, float z) {		return  this.x <= x &&				this.y <= y &&				this.z <= z;	}		public boolean anyLessThenOrEqual(float then) { return anyLessThenOrEqual(then, then, then); }	public boolean anyLessThenOrEqual(double then) { return anyLessThenOrEqual(then, then, then); }	public boolean anyLessThenOrEqual(Vector3f then) { return anyLessThenOrEqual(then.x, then.y, then.z); }	public boolean anyLessThenOrEqual(double x, double y, double z) { 		return anyLessThenOrEqual((float) x, (float) y, (float) z); }		public boolean anyLessThenOrEqual(float x, float y, float z) {		return  this.x <= x ||				this.y <= y ||				this.z <= z;	}		public boolean equalTo(float then) { return equalTo(then, then, then); }	public boolean equalTo(double then) { return equalTo(then, then, then); }	public boolean equalTo(Vector3f then) { return equalTo(then.x, then.y, then.z); }	public boolean equalTo(double x, double y, double z) { return equalTo((float) x, (float) y, (float) z); }		public boolean equalTo(float x, float y, float z) {		return equals(x, y, z);	}		public boolean anyEqualTo(float then) { return anyEqualTo(then, then, then); }	public boolean anyEqualTo(double then) { return anyEqualTo(then, then, then); }	public boolean anyEqualTo(Vector3f then) { return anyEqualTo(then.x, then.y, then.z); }	public boolean anyEqualTo(double x, double y, double z) { return anyEqualTo((float) x, (float) y, (float) z); }		public boolean anyEqualTo(float x, float y, float z) {		return  Math.abs(this.x - x) < 0.000001 ||				Math.abs(this.y - y) < 0.000001 ||				Math.abs(this.z - z) < 0.000001;	}	//----------------------------------------------------------- Swizzle -----------------------------------------------------------\\	public float x() { return x; }	public float y() { return y; }	public float z() { return z; }		public Vector2f xy() { return new Vector2f(x, y); }	public Vector2f xz() { return new Vector2f(x, z); }		public Vector2f yx() { return new Vector2f(y, x); }	public Vector2f yz() { return new Vector2f(y, z); }	public Vector2f zx() { return new Vector2f(z, x); }	public Vector2f zy() { return new Vector2f(z, y); }		public Vector3f xyz() { return new Vector3f(x, y, z); }	public Vector3f xzy() { return new Vector3f(x, z, y); }	public Vector3f yxz() { return new Vector3f(y, x, z); }	public Vector3f yzx() { return new Vector3f(y, z, x); }	public Vector3f zxy() { return new Vector3f(z, x, y); }	public Vector3f zyx() { return new Vector3f(z, y, x); }	public Vector3f withX(float x) { return new Vector3f(x, y, z); }	public Vector3f withY(float y) { return new Vector3f(x, y, z); }	public Vector3f withZ(float z) { return new Vector3f(x, y, z); }	//---------------------------------------------------- Accessors / Modifiers ----------------------------------------------------\\		public MutableVector3f set() { return new MutableVector3f(); }	public Vector3f lock() { return new Vector3f(x, y, z); }		public void set(Vector3f set) {		this.x = set.x;		this.y = set.y;		this.z = set.z;	}		public Vector3f clone() {		return new Vector3f(x, y, z);	}		public String toString() {		return printValues(x, y, z);	}		public static String printValues(float x, float y, float z) {		return "<" + x + ", " + y + ", " + z + ">";	}	public float getX() { return x; }	public float getY() { return y; }	public float getZ() { return z; }	public Vector3f addX(float x) { this.x += x; return this; }	public Vector3f addY(float y) { this.y += y; return this; }	public Vector3f addZ(float z) { this.z += z; return this; }	public Vector3f setX(float x) { this.x = x; return this; }	public Vector3f setY(float y) { this.y = y; return this; }	public Vector3f setZ(float z) { this.z = z; return this; }		public Vector3f reset() {		return this.setX(0).setY(0).setZ(0);	}}