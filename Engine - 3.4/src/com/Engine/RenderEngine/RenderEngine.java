package com.Engine.RenderEngine;import static org.lwjgl.opengl.GL11.GL_BACK;import static org.lwjgl.opengl.GL11.GL_BLEND;import static org.lwjgl.opengl.GL11.GL_CCW;import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;import static org.lwjgl.opengl.GL11.GL_CULL_FACE;import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;import static org.lwjgl.opengl.GL11.GL_DEPTH_TEST;import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;import static org.lwjgl.opengl.GL11.glBlendFunc;import static org.lwjgl.opengl.GL11.glClear;import static org.lwjgl.opengl.GL11.glClearColor;import static org.lwjgl.opengl.GL11.glCullFace;import static org.lwjgl.opengl.GL11.glEnable;import static org.lwjgl.opengl.GL11.glFrontFace;import java.util.ArrayList;import org.lwjgl.input.Keyboard;import com.Engine.RenderEngine.Particles.ParticleManager;import com.Engine.RenderEngine.Shaders.Renderer;import com.Engine.RenderEngine.Shaders.Shader;import com.Engine.RenderEngine.Util.Camera;import com.Engine.Util.Vectors.MatrixUtil;import com.Engine.Util.Vectors.Vector3f;public class RenderEngine {	public static final int RENDER_STEP_PRIMARY = 0;	public static final int RENDER_STEP_SECONDARY = 1;	public static final int RENDER_STEP_ALPHA = 2;	public static final int RENDER_STEP_FINAL = 3;	private static final int RENDER_STEP_COUNT = 4;		private ArrayList<ArrayList<Renderer<?, ?>>> renderers;	private ParticleManager particleManager;		public RenderEngine() {		particleManager = new ParticleManager();		renderers = new ArrayList<>(RENDER_STEP_COUNT);				for(int i = 0; i < RENDER_STEP_COUNT; i++) {			renderers.add(new ArrayList<Renderer<?, ?>>());		}				Shader.setSkyColor(new Vector3f());//new Vector3f(Math.random(), Math.random(), Math.random()));	}		public void render(Camera camera) {		particleManager.render(camera);				Shader.unbind();//		Shader.setSkyColor(new Vector3f(Math.random(), Math.random(), Math.random()));		Shader.setProjectionMatrix(camera.getPorjectionMatrix());		Shader.setViewMatrix(camera.getViewMatrix());			glEnable(GL_DEPTH_TEST);		//		glEnable(GL_CULL_FACE);//		glFrontFace(GL_CCW);//		glCullFace(GL_BACK);					    glEnable(GL_BLEND);	    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);		//		Vector3f skyColor = Shader.getSkyColor();//		glClearColor(skyColor.x, skyColor.y, skyColor.z, 1.0f);		glClear((Keyboard.isKeyDown(Keyboard.KEY_E) ? 0 : GL_COLOR_BUFFER_BIT) | GL_DEPTH_BUFFER_BIT);			for(ArrayList<Renderer<?, ?>> rendererArray : renderers) {		for(Renderer<?, ?> renderer : rendererArray) {			renderer.render();		}}	}		public void addRenderer(Shader shader) { addRenderer(shader.getRenderer()); }	public void addRenderer(Renderer<?, ?> renderer) {		renderers.get(renderer.getRenderStage()).add(renderer);	}		public ParticleManager getParticleManager() { return particleManager; }}//if(!Keyboard.isKeyDown(Keyboard.KEY_P)) return;//glPushMatrix();////Shader.unbind();//////ICubeRender render = Cubes.GoldCube.getRender(0);//boolean[] visableFaces = new boolean[]{true, false, false, false, false, false};//render.getVisableFaces(position, cube, metadata, world.getChunk_WorldScale(position));//ArrayList<Vertex> cubeVertices = render.getVertices(new Vector3f(), Cubes.GoldCube, 0);//ArrayList<Integer> cubeIndices = render.getIndecies(Cubes.GoldCube, 0, visableFaces);//Cube.getDefaultTextureSheet().getTextureMap().unbind();////glBegin(GL_TRIANGLES);////for(Integer index : cubeIndices) {//	Vertex vertex = cubeVertices.get(index);//	glVertex2f(vertex.getTexCoord().x * 2 - 1, (vertex.getTexCoord().y * 2 - 1) * -1);//	Vector2f colorVec = new Vector2f(vertex.getTexCoord()).multiply(255).subtract(64, 16).divide(16);//	glColor4f(colorVec.x, colorVec.y, 0.5f, 1);////	System.out.println((vertex.getTexCoord().x * 2 - 1) + " : " + (vertex.getTexCoord().y * 2 - 1));//}////System.out.println();		//glEnd();////Cube.getDefaultTextureSheet().getTextureMap().bind();//	//glBegin(GL_QUADS);//glColor3f(1, 1, 1);//	glVertex2f(-1, -1); 	glTexCoord2f(0, 0);//	glVertex2f( 1, -1);		glTexCoord2f(1, 0);//	glVertex2f( 1,  1); 	glTexCoord2f(1, 1);//	glVertex2f(-1,  1);		glTexCoord2f(0, 1);//glEnd();////////glPopMatrix();//////glDisable(GL_BLEND);